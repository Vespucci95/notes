{"componentChunkName":"component---src-templates-post-template-tsx","path":"/헤드 퍼스트 디자인 패턴 14가지 GoF 필살 패턴/strategy-pattern/","result":{"data":{"markdownRemark":{"id":"f597d5b0-b711-5c92-b463-0bf489434533","html":"<h2 id=\"전략-패턴\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4\" aria-label=\"전략 패턴 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴</h2>\n<blockquote>\n<p>알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘 군을 수정해서 쓸 수 있게 해준다. 전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있다.</p>\n</blockquote>\n<h2 id=\"오리-시뮬레이션-게임-simuduck\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A6%AC-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98-%EA%B2%8C%EC%9E%84-simuduck\" aria-label=\"오리 시뮬레이션 게임 simuduck permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오리 시뮬레이션 게임, SimUduck</h2>\n<p>개발자 A는 오리 시뮬레이션 게임(SimUduck)을 만드는 회사에 재직중이다. 개임 내에는 매우 다양한 오리가 등장한다.  개발자 A는 <code class=\"language-text\">Duck</code> 이라는 슈퍼 클래스를 만들어 이 클래스를 확장해서 서로 다른 종류의 오리를 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MallardDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> override <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 적당한 모양을 표시  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RedheadDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> override <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 적당한 모양을 표시  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때, 임원진은 오리가 날 수 있도록 요청하였다.</p>\n<p>요청을 받은 개발자 A는 기존 <code class=\"language-text\">Duck</code> 클래스에 <code class=\"language-text\">fly()</code>를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// A는 fly 를 추가했다.  </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이로인해 문제가 발생했다. 날수 없는 오리(장난감 오리)들 까지 모두 날게되었다.</p>\n<p>슈퍼클래스에 <code class=\"language-text\">fly()</code> 메서드를 추가하면서 일부 클래스에 적합하지 않은 행동이 추가된 것.</p>\n<h2 id=\"상속을-생각하기\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D%EC%9D%84-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"상속을 생각하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속을 생각하기</h2>\n<p>개발자 A는 <code class=\"language-text\">quack()</code> 메서드를 오버라이드한 방법을 떠올려 <code class=\"language-text\">fly()</code>도 동일하게 작업한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoyDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> override <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 적당한 모양을 표시  </span>\n  <span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> override <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token comment\">// 아무것도 하지 않도록 오버라이드   </span>\n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token keyword\">public</span> override <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token comment\">// 아무것도 하지 않도록 오버라이드   </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>이 방법은 좋은 방법이 아니다. 좋지 않은 이유는 다음과 같은 이유이다.</p>\n<ul>\n<li>서브클래스에서 코드가 중복된다.</li>\n<li>실행 시에 특징을 바꾸기 어렵다.</li>\n<li>모든 오리의 행동을 알기 어렵다.</li>\n<li>코드를 변경했을 때 다른 오리들에게 원치 않은 영향을 끼칠 수 있다.</li>\n</ul>\n</blockquote>\n<h2 id=\"인터페이스-설계하기\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0\" aria-label=\"인터페이스 설계하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스 설계하기</h2>\n<p>앞으로 오리가 6개월마다 추가된다고 가정해보자.</p>\n<p>상속을 계속 활용한다면 개발자 A는 n개의 서브클래스를 살펴보며 오버라이드 해야할 것이다. ( 6개월에 한 번 괜찮지 않나? 라고 생각한다면 이 작업을 2개월 혹은 1주에 한번 반복 한다고 생각해보자. )</p>\n<p>개발자 A는 옳은 방법이 아니라는 것을 알고, <code class=\"language-text\">Flyable</code>, <code class=\"language-text\">Quackable</code> 인터페이스를 만들어 기능이 필요한 오리에 사용하기로 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Quackable</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MallardDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Flyable</span><span class=\"token punctuation\">,</span> Quackable <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RedheadDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Flyable</span><span class=\"token punctuation\">,</span> Quackable <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RubberDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Quackable</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoyDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>이 방법은 일부 문제점을 해결할 수 있지만, 코드 관리에 커다란 문제가 생긴다.</p>\n<ul>\n<li>코드 재사용 문제</li>\n<li>날 수 있는 오리중에서도 날아다니는 방식이 다를 수 있음</li>\n</ul>\n</blockquote>\n<h2 id=\"문제를-명확하게-파악하기\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0\" aria-label=\"문제를 명확하게 파악하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제를 명확하게 파악하기</h2>\n<p>상속이 성공적인 해결책이 아니라는 사실은 이제 알고있다.\nFlyable과 Quackable 인터페이스를 사용하는 방법은 괜찮아 보였다.</p>\n<p>하지만 자바 인터페이스에는 구현된 코드가 없으므로 코드를 재사용할 수 없다는 문제점이 있다.\n즉 한 가지 행동을 바꿀 때마다 그 해동이 정의되어있는 모든 서브클래스를 전부 찾아서 고쳐야한다.\n이 과정에서 버그가 생길 가능성은 책임지지 않는다.</p>\n<blockquote>\n<p>디자인 원칙</p>\n<p>\"애플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분과 분리한다.\"</p>\n<ul>\n<li>달라지는 부분을 찾아 나머지 코드에 영향을 주지않도록 <strong>캡슐화</strong> 한다.</li>\n<li>코드 변경 과정에서 의도치 않게 발생하는 일을 줄인다.</li>\n<li>시스템의 유연성을 향상시킬 수 있다.</li>\n</ul>\n</blockquote>\n<p><strong>다시 말해, 코드에 새로운 요구사항이 있을 때마다 바뀌는 부분이 있다면 분리해야한다.</strong></p>\n<h2 id=\"바뀌지-않는-부분과-그렇지-않은-부분-분리하기\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%80%8C%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%B6%80%EB%B6%84%EA%B3%BC-%EA%B7%B8%EB%A0%87%EC%A7%80-%EC%95%8A%EC%9D%80-%EB%B6%80%EB%B6%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"바뀌지 않는 부분과 그렇지 않은 부분 분리하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바뀌지 않는 부분과 그렇지 않은 부분 분리하기</h2>\n<p><strong>바뀌지 않는 부분</strong></p>\n<p><code class=\"language-text\">fly()</code>와 <code class=\"language-text\">quack()</code> 문제를 제외하면 <code class=\"language-text\">Duck</code> 클래스는 잘 동작하고 있다.\n나머지 부분은 자주 달라지거나 바뀌지 않는다.</p>\n<p>그러니 몇 가지 자잘한 변경이 필요하지만 <code class=\"language-text\">Duck</code> 클래스는 그대로 두는 게 좋다.</p>\n<p><strong>그렇지 않은 부분</strong></p>\n<p><code class=\"language-text\">fly()</code>, <code class=\"language-text\">quack()</code>는 오리의 종류에 따라 달라지기 때문에 행동을 나타낼 별개의 클래스 집합으로 만든다.</p>\n<h2 id=\"오리의-행동을-디자인하는-방법\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A6%AC%EC%9D%98-%ED%96%89%EB%8F%99%EC%9D%84-%EB%94%94%EC%9E%90%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"오리의 행동을 디자인하는 방법 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오리의 행동을 디자인하는 방법</h2>\n<p><strong>나는 행동과 꽥꽥 거리는 행동을 구현하는 클래스 집합을 어떻게 디자인해야할까?</strong>\n우선 최대한 유연하게 만드는 것이 좋을것이다.</p>\n<p><code class=\"language-text\">Duck</code>의 인스턴스에 행동을 할당할 수 있도록 해보자. 즉, Duck 클래스에 행동과 관련된 세터(setter) 메서드를 포함해서 프로그램 실행 중에도 나는 행동을 바꿀 수 있으면 좋다.</p>\n<blockquote>\n<p>디자인 원칙</p>\n<p>\"구현보다는 인터페이스에 맞춰서 프로그래밍한다.\"</p>\n<ul>\n<li>\"인터페이스에 맞춰서 프로그래밍한다.\" 라는 말은 \"상위 형식에 맞춰 프로그래밍한다.\" 라는 말이다.</li>\n</ul>\n</blockquote>\n<p>핵심은 \"상위 형식에 맞춰서 프로그래밍하라\" 라는 원칙이다.</p>\n<p>간단한 예시를 통해 의미를 더 파악해보자. <code class=\"language-text\">Animal</code> 이라는 추상 클래스가 있고, 그 밑에 <code class=\"language-text\">Dog</code>와 <code class=\"language-text\">Cat</code>이라는 구상 클래스가 있다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Animal과 Dog 정의</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍멍!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"왈왈!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 접근 방식 1: 구체적인 구현에 맞춰 프로그래밍</span>\n<span class=\"token comment\">// 변수 d를 Dog 형식으로 선언하면 구체적인 구현에 맞춰서 코딩해야 합니다.</span>\n<span class=\"token keyword\">const</span> d<span class=\"token operator\">:</span> Dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nd<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Dog 클래스의 특정 메소드 사용 가능</span>\n\n<span class=\"token comment\">// 접근 방식 2: 인터페이스/상위 형식에 맞춰 프로그래밍</span>\n<span class=\"token comment\">// Dog라는 걸 알고 있긴 하지만 다형성을 활용해서 Animal의 레퍼런스를 써도 됩니다.</span>\n<span class=\"token keyword\">const</span> animal<span class=\"token operator\">:</span> Animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanimal<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Animal 인터페이스에 정의된 메소드만 사용 가능</span>\n<span class=\"token comment\">// animal.bark(); // 오류! Animal 타입에는 bark() 메소드가 없음</span>\n\n<span class=\"token comment\">// 접근 방식 3: 가장 바람직한 방법</span>\n<span class=\"token comment\">// 상위 형식의 인스턴스를 만드는 과정을 분리하여 실행 시 대입</span>\n<span class=\"token comment\">// 함수를 통해 Animal 객체를 얻음</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Animal <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 여기서는 어떤 Animal 구현체를 반환할지 결정할 수 있음</span>\n  <span class=\"token comment\">// 런타임에 다른 구현체를 반환할 수도 있음</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Animal의 하위 형식 가운데 어떤 형식인지는 모른다.</span>\n<span class=\"token comment\">// 단지 makeSound에 올바른 반응만 할 수 있으면 된다.</span>\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> Animal <span class=\"token operator\">=</span> <span class=\"token function\">getAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"오리의-행동을-구현하는-방법\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A6%AC%EC%9D%98-%ED%96%89%EB%8F%99%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"오리의 행동을 구현하는 방법 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오리의 행동을 구현하는 방법</h2>\n<p>(인터페이스에 맞춰서 프로그래밍 합시다!)</p>\n<p>개발자 A는 <code class=\"language-text\">FlyBehavior</code>와 <code class=\"language-text\">QuackBehavior</code> 인터페이스를 사용하여 각 행동을 구현하는 클래스를 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FlyBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyWithWings</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FlyBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 나는 방법을 구현  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyNoWay</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FlyBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 아무것도 하지 않음.  </span>\n    <span class=\"token comment\">// 날 수 없다!  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">QuackBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Quack</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">QuackBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 꽥꽥 소리를 낸다.  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Squeak</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">QuackBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 고무 오리 삑삑  </span>\n    <span class=\"token comment\">// 소리를 낸다.  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MuteQuack</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">QuackBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 아무것도 하지 않음.  </span>\n    <span class=\"token comment\">// 소리를 낼 수 없는 경우  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식으로 디자인하면 다른 형식의 객체에서도 나는 행동과 꽥꽥 거리는 행동을 재사용할 수 있다. 그런 행동이 더 이상 <code class=\"language-text\">Duck</code> 클래스 안에 숨겨져 있지 않기 때문이다.</p>\n<p>그리고 기존의 행동 클래스를 수정하거나 날라다니는 행동을 사용하는 <strong><code class=\"language-text\">Duck</code> 클래스를 전혀 건드리지 않고도 새로운 행동을 추가</strong>할 수 있다.</p>\n<h1 id=\"오리-행동-통합하기\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A6%AC-%ED%96%89%EB%8F%99-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0\" aria-label=\"오리 행동 통합하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오리 행동 통합하기</h1>\n<p>가장 중요한 점은 나는 행동과 꽥꽥 거리는 행동을 <code class=\"language-text\">Duck</code> 클래스(또는 그 서브클래스)에서 정의한 메소드를 써서 구현하지 않고 <strong>다른 클래스에 위임</strong>한다는 것이다.</p>\n<h2 id=\"구현-단계\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%8B%A8%EA%B3%84\" aria-label=\"구현 단계 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 단계</h2>\n<ol>\n<li>우선 Duck 클래스에 <code class=\"language-text\">flyBehavior</code>와 <code class=\"language-text\">quackBehavior</code>라는 인터페이스 형식의 인스턴스 변수를 추가한다. (특정 구상 클래스 형식으로 선언하지 않는다.)</li>\n<li>각 오리 객체에서는 실행시에 이 변수에 특정 행동 형식의 레퍼런스를 다형적으로 설정한다.</li>\n<li>나는 행동과 꽥꽥 거리는 행동은 <code class=\"language-text\">FlyBehavior</code>와 <code class=\"language-text\">QuackBehavior</code>인터페이스로 옮겨놓았으므로 Duck 클래스와 모든 서브 클래스에서 <code class=\"language-text\">fly()</code> <code class=\"language-text\">quack()</code> 메소드를 제거한다.</li>\n<li>Duck 클래스에 <code class=\"language-text\">fly()</code> 와 <code class=\"language-text\">quack()</code> 대신 <code class=\"language-text\">performFly()</code> 와 <code class=\"language-text\">performQuack()</code> 이라는 메소드를 넣는다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">protected</span> flyBehavior<span class=\"token operator\">:</span> FlyBehavior<span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">protected</span> quackBehavior<span class=\"token operator\">:</span> QuackBehavior<span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">performFly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flyBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">performQuack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quackBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MallardDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flyBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlyWithWings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quackBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'저는 물오리 입니다.'</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"동적으로-행동-지정하기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%96%89%EB%8F%99-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"동적으로 행동 지정하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적으로 행동 지정하기</h1>\n<p>오리의 행동을 생성자에서 인스턴스를 만드는 방법이 아닌, Duck의 서브클래스에서 세터 메소드를 호출하는 방법으로 설정할 수 있도록 개선해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">protected</span> _flyBehavior<span class=\"token operator\">:</span> FlyBehavior<span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">protected</span> _quackBehavior<span class=\"token operator\">:</span> QuackBehavior<span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">performFly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_flyBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">performQuack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_quackBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token keyword\">set</span> <span class=\"token function\">flyBehavior</span><span class=\"token punctuation\">(</span>fb<span class=\"token operator\">:</span> FlyBehavior<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_flyBehavior <span class=\"token operator\">=</span> fb<span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">set</span> <span class=\"token function\">quackBehavior</span><span class=\"token punctuation\">(</span>qb<span class=\"token operator\">:</span> QuackBehavior<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_quackBehavior <span class=\"token operator\">=</span> qb<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_flyBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlyNoWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_quackBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'저는 모델 오리입니다.'</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 로켓 추진 비행 행동 클래스 추가</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyRocketPowered</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FlyBehavior</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로켓 추진으로 날아갑니다.\"</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용 예시</span>\n<span class=\"token keyword\">const</span> mallardDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MallardDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nmallardDuck<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 저는 물오리 입니다.  </span>\nmallardDuck<span class=\"token punctuation\">.</span><span class=\"token function\">performFly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 날고 있습니다.  </span>\nmallardDuck<span class=\"token punctuation\">.</span><span class=\"token function\">performQuack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 꽥-꽥  </span>\n  \n<span class=\"token keyword\">const</span> modelDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nmodelDuck<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 저는 모델 오리입니다.  </span>\nmodelDuck<span class=\"token punctuation\">.</span><span class=\"token function\">performFly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 날수가 없어요.  </span>\nmodelDuck<span class=\"token punctuation\">.</span>flyBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlyRocketPowered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \nmodelDuck<span class=\"token punctuation\">.</span><span class=\"token function\">performFly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 로켓 추진으로 날아갑니다.</span></code></pre></div>\n<h1 id=\"캡슐화된-행동-살펴보기\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EB%90%9C-%ED%96%89%EB%8F%99-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"캡슐화된 행동 살펴보기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화된 행동 살펴보기</h1>\n<p>오리의 행동들을 단순한 메소드가 아닌 알고리즘군(family of algorithms)으로 생각하는 접근법이 중요하다. 이 디자인에서의 알고리즘은 오리가 하는 행동(다른 방식으로 꽥꽥거리고 나는 행동)이지만, 이 패턴은 세금 계산, 주문 처리 등 다양한 알고리즘에도 적용할 수 있다.</p>\n<p>클래스 간 관계에도 주목하자:</p>\n<ul>\n<li>A는 B이다 관계 (상속): <code class=\"language-text\">MallardDuck</code>은 <code class=\"language-text\">Duck</code>이다</li>\n<li>A에는 B가 있다 관계 (구성): <code class=\"language-text\">Duck</code>에는 <code class=\"language-text\">FlyBehavior</code>가 있다</li>\n<li>A가 B를 구현하는 관계: <code class=\"language-text\">FlyWithWings</code>는 <code class=\"language-text\">FlyBehavior</code>를 구현한다</li>\n</ul>\n<h1 id=\"두-클래스를-합치는-방법-구성\" style=\"position:relative;\"><a href=\"#%EB%91%90-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%ED%95%A9%EC%B9%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EA%B5%AC%EC%84%B1\" aria-label=\"두 클래스를 합치는 방법 구성 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 클래스를 합치는 방법: 구성</h1>\n<p>\"A에는 B가 있다\" 관계는 구성(composition)을 나타낸다. 각 오리에는 <code class=\"language-text\">FlyBehavior</code>와 <code class=\"language-text\">QuackBehavior</code>가 있으며, 각각 나는 행동과 꽥꽥 거리는 행동을 위임받는다.</p>\n<p>여기서 오리 클래스는 행동을 상속받는 대신, 적절한 행동 객체로 구성되어 행동을 부여받는다. 구성은 매우 중요한 테크닉이자 디자인 원칙이다:</p>\n<blockquote>\n<p>디자인 원칙</p>\n<p>\"상속보다는 구성을 활용한다.\"</p>\n</blockquote>\n<p>구성(composition)의 이점</p>\n<ul>\n<li>유연성을 크게 향상시킨다</li>\n<li>알고리즘군을 별도의 클래스 집합으로 캡슐화할 수 있다</li>\n<li>구성요소로 사용하는 객체에서 올바른 인터페이스를 구현하기만 하면 실행 시에 행동을 바꿀 수 있다</li>\n</ul>","frontmatter":{"title":"CHAPTER 01 - 디자인 패턴의 세계로 떠나기 (전략 패턴)","date":"2025.02.28","categories":"DesignPattern","description":"헤드퍼스트 디자인 패턴 1장을 읽고 TS로 정리한 내용입니다."},"fields":{"category":"헤드 퍼스트 디자인 패턴 14가지 GoF 필살 패턴"},"enhancedHeadings":[{"id":"전략-패턴","value":"전략 패턴","depth":2,"contentLength":75},{"id":"오리-시뮬레이션-게임-simuduck","value":"오리 시뮬레이션 게임, SimUduck","depth":2,"contentLength":547},{"id":"상속을-생각하기","value":"상속을 생각하기","depth":2,"contentLength":283},{"id":"인터페이스-설계하기","value":"인터페이스 설계하기","depth":2,"contentLength":674},{"id":"문제를-명확하게-파악하기","value":"문제를 명확하게 파악하기","depth":2,"contentLength":320},{"id":"바뀌지-않는-부분과-그렇지-않은-부분-분리하기","value":"바뀌지 않는 부분과 그렇지 않은 부분 분리하기","depth":2,"contentLength":145},{"id":"오리의-행동을-디자인하는-방법","value":"오리의 행동을 디자인하는 방법","depth":2,"contentLength":986},{"id":"오리의-행동을-구현하는-방법","value":"오리의 행동을 구현하는 방법","depth":2,"contentLength":663},{"id":"오리-행동-통합하기","value":"오리 행동 통합하기","depth":1,"contentLength":67},{"id":"구현-단계","value":"구현 단계","depth":2,"contentLength":651},{"id":"동적으로-행동-지정하기","value":"동적으로 행동 지정하기","depth":1,"contentLength":936},{"id":"캡슐화된-행동-살펴보기","value":"캡슐화된 행동 살펴보기","depth":1,"contentLength":238},{"id":"두-클래스를-합치는-방법-구성","value":"두 클래스를 합치는 방법: 구성","depth":1,"contentLength":265}]}},"pageContext":{}},"staticQueryHashes":["3003237974"],"slicesMap":{}}