{"componentChunkName":"component---src-templates-post-template-tsx","path":"/post/factory-pattern/","result":{"data":{"markdownRemark":{"id":"68cf4a02-7748-5225-81b6-873dbe517340","html":"<h2 id=\"팩토리-메소드-패턴의-정의\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"팩토리 메소드 패턴의 정의 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 메소드 패턴의 정의</h2>\n<blockquote>\n<p>팩토리 메소드 패턴(Factory Method Pattern)에서는 객체를 생성할 때 필요한 인터페이스를 만들고, 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정한다. 팩토리 메소드 패턴을 사용하면 클래스 인스턴스 만드는 일을 서브클래스에게 맡기게 된다.</p>\n</blockquote>\n<h2 id=\"추상-팩토리-패턴의-정의\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"추상 팩토리 패턴의 정의 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상 팩토리 패턴의 정의</h2>\n<blockquote>\n<p>추상 팩토리 패턴(Abstract Factory Pattern)은 구상 클래스에 의존하지 않고도 서로 연관되거나 의존적인 객체로 이루어진 제품군을 생성하는 인터페이스를 제공한다. 구상 클래스는 서브클래스에서 만든다.</p>\n</blockquote>\n<h2 id=\"팩토리-패턴이-필요한-이유\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"팩토리 패턴이 필요한 이유 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 패턴이 필요한 이유</h2>\n<p>객체 생성 코드가 애플리케이션에 여러 군데 분산되어 있으면:</p>\n<ul>\n<li>코드 관리와 갱신이 어려워진다</li>\n<li>객체 생성 로직이 변경될 때마다 여러 곳을 수정해야 한다</li>\n<li>구상 클래스에 직접 의존하게 되어 OCP를 위반한다</li>\n</ul>\n<p>특히 아래와 같은 코드는 수정과 확장이 어렵다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">orderPizza</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> pizza<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"cheese\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pizza <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CheesePizza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"pepperoni\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pizza <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PepperoniPizza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"clam\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pizza <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClamPizza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 피자 종류를 추가하거나 제거할 때마다 이 코드를 수정해야 함</span>\n    \n    pizza<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pizza<span class=\"token punctuation\">.</span><span class=\"token function\">bake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pizza<span class=\"token punctuation\">.</span><span class=\"token function\">cut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pizza<span class=\"token punctuation\">.</span><span class=\"token function\">box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> pizza<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"팩토리-메소드-패턴-살펴보기\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"팩토리 메소드 패턴 살펴보기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 메소드 패턴 살펴보기</h2>\n<p>팩토리 메소드 패턴에서는 객체 생성을 담당하는 메소드를 추상화하고 서브클래스에서 구현하게 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 추상 Creator 클래스</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PizzaStore</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 템플릿 메소드: 공통 알고리즘 정의</span>\n    <span class=\"token function\">orderPizza</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Pizza <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 팩토리 메소드를 호출하여 객체 생성을 서브클래스에 위임</span>\n        <span class=\"token keyword\">const</span> pizza <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createPizza</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 나머지 처리는 추상 클래스에서 담당</span>\n        pizza<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pizza<span class=\"token punctuation\">.</span><span class=\"token function\">bake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pizza<span class=\"token punctuation\">.</span><span class=\"token function\">cut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pizza<span class=\"token punctuation\">.</span><span class=\"token function\">box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> pizza<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 팩토리 메소드 - 서브클래스에서 구현</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token function\">createPizza</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Pizza<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 구상 Creator 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NYPizzaStore</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PizzaStore</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">createPizza</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Pizza <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"cheese\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NYStyleCheesePizza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"pepperoni\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NYStylePepperoniPizza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 기타 피자 타입...</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"추상-팩토리-패턴-살펴보기\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"추상 팩토리 패턴 살펴보기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상 팩토리 패턴 살펴보기</h2>\n<p>추상 팩토리 패턴은 관련된 객체들의 집합을 생성하기 위한 인터페이스를 제공한다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 추상 팩토리 인터페이스</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PizzaIngredientFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createDough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Dough<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createSauce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Sauce<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Cheese<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createVeggies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Veggies<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createPepperoni</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Pepperoni<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createClam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Clams<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 구상 팩토리 구현</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NYPizzaIngredientFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PizzaIngredientFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createDough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Dough <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThinCrustDough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">createSauce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Sauce <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MarinaraSauce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">createCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Cheese <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReggianoCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 기타 재료 생성 메소드...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 추상 제품</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    dough<span class=\"token operator\">:</span> Dough<span class=\"token punctuation\">;</span>\n    sauce<span class=\"token operator\">:</span> Sauce<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 기타 재료...</span>\n    \n    <span class=\"token keyword\">abstract</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 공통 메소드</span>\n    <span class=\"token function\">bake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"175도에서 25분 간 굽기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 기타 공통 메소드...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 구상 제품</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CheesePizza</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n    ingredientFactory<span class=\"token operator\">:</span> PizzaIngredientFactory<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>ingredientFactory<span class=\"token operator\">:</span> PizzaIngredientFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ingredientFactory <span class=\"token operator\">=</span> ingredientFactory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">준비 중: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dough <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ingredientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sauce <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ingredientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createSauce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cheese <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ingredientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"팩토리-메소드-vs-추상-팩토리-비교\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C-vs-%EC%B6%94%EC%83%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%B9%84%EA%B5%90\" aria-label=\"팩토리 메소드 vs 추상 팩토리 비교 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 메소드 vs 추상 팩토리 비교</h2>\n<table>\n<thead>\n<tr>\n<th>특성</th>\n<th>팩토리 메소드</th>\n<th>추상 팩토리</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>생성 방식</td>\n<td>상속 활용</td>\n<td>구성(composition) 활용</td>\n</tr>\n<tr>\n<td>객체 생성</td>\n<td>서브클래스가 팩토리 메소드를 오버라이드해 객체 생성</td>\n<td>구상 팩토리 객체가 관련 객체들의 집합 생성</td>\n</tr>\n<tr>\n<td>확장성</td>\n<td>새로운 제품이 필요하면 새 서브클래스 생성</td>\n<td>새로운 제품군이 필요하면 새 팩토리 구현 및 모든 메소드 구현 필요</td>\n</tr>\n<tr>\n<td>용도</td>\n<td>단일 제품 계층구조 생성</td>\n<td>관련된 제품군 생성</td>\n</tr>\n<tr>\n<td>관계 구조</td>\n<td>생산자와 제품이 병렬 계층 구조</td>\n<td>제품군 간의 일관성 유지</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"디자인-원칙-의존성-뒤집기-원칙-dip\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9B%90%EC%B9%99-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%92%A4%EC%A7%91%EA%B8%B0-%EC%9B%90%EC%B9%99-dip\" aria-label=\"디자인 원칙 의존성 뒤집기 원칙 dip permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 원칙: 의존성 뒤집기 원칙 (DIP)</h2>\n<blockquote>\n<p>추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.</p>\n</blockquote>\n<p>의존성 뒤집기 원칙을 지키는 방법</p>\n<ul>\n<li>변수에 구상 클래스의 레퍼런스를 저장하지 않는다</li>\n<li>구상 클래스에서 유도된 클래스를 만들지 않는다</li>\n<li>베이스 클래스에 이미 구현된 메소드를 오버라이드하지 않는다</li>\n</ul>\n<h2 id=\"팩토리-패턴-적용-시점\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%EC%A0%81%EC%9A%A9-%EC%8B%9C%EC%A0%90\" aria-label=\"팩토리 패턴 적용 시점 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 패턴 적용 시점</h2>\n<ul>\n<li>\n<p>팩토리 메소드 패턴</p>\n<ul>\n<li>클라이언트 코드와 객체 생성 로직을 분리해야 할 때</li>\n<li>어떤 구상 클래스가 필요한지 미리 알 수 없을 때</li>\n<li>객체 생성 책임을 서브클래스에게 위임하고 싶을 때</li>\n</ul>\n</li>\n<li>\n<p>추상 팩토리 패턴</p>\n<ul>\n<li>관련된 제품 객체들의 집합을 생성할 때</li>\n<li>제품군의 일관성을 유지해야 할 때</li>\n<li>구현을 바꿔가며 다양한 제품군을 생성해야 할 때</li>\n</ul>\n</li>\n</ul>\n<p>팩토리 패턴을 활용하면 객체 생성 코드를 캡슐화하여 클라이언트 코드와 분리하고, 확장 시 기존 코드를 수정하지 않아도 되는 유연한 설계가 가능하다.</p>","frontmatter":{"title":"CHAPTER 04 - 객체지향 빵 굽기 (팩토리 패턴)","date":"2025.03.06","categories":"DesignPattern","description":"헤드퍼스트 디자인 패턴 4장을 읽고 TS로 정리한 내용입니다."},"fields":{"category":"헤드 퍼스트 디자인 패턴 14가지 GoF 필살 패턴"},"enhancedHeadings":[{"id":"팩토리-메소드-패턴의-정의","value":"팩토리 메소드 패턴의 정의","depth":2,"contentLength":117},{"id":"추상-팩토리-패턴의-정의","value":"추상 팩토리 패턴의 정의","depth":2,"contentLength":98},{"id":"팩토리-패턴이-필요한-이유","value":"팩토리 패턴이 필요한 이유","depth":2,"contentLength":370},{"id":"팩토리-메소드-패턴-살펴보기","value":"팩토리 메소드 패턴 살펴보기","depth":2,"contentLength":548},{"id":"추상-팩토리-패턴-살펴보기","value":"추상 팩토리 패턴 살펴보기","depth":2,"contentLength":933},{"id":"팩토리-메소드-vs-추상-팩토리-비교","value":"팩토리 메소드 vs 추상 팩토리 비교","depth":2,"contentLength":213},{"id":"디자인-원칙-의존성-뒤집기-원칙-dip","value":"디자인 원칙: 의존성 뒤집기 원칙 (DIP)","depth":2,"contentLength":114},{"id":"팩토리-패턴-적용-시점","value":"팩토리 패턴 적용 시점","depth":2,"contentLength":197}]}},"pageContext":{}},"staticQueryHashes":["2106608769","2555404786"],"slicesMap":{}}